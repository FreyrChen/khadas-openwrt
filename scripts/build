#!/bin/sh

## hyphop ##

#= build demo openwrt khadas vims image

## HOW TO

## ./build -1|-2|-3|-3l

PR=$(dirname $0)
PA=$(realpath $PR)

. $0.conf

APPS=""

for p in $@; do

    case $p in
	-vim2|-2)
	BOARD=VIM2
	;;
	-3)
	BOARD=VIM3
	;;
	-3l)
	BOARD=VIM3L
	;;
	-vim1|-1)
	BOARD=VIM1
	;;

	'+'*)
	A="${p#+}"
	APPS="$APPS $A"
	;;

	*)
	echo "[w] unknown param $p">&2
	exit 1
	;;
    esac

done

echo "[i] config board: $BOARD rel : $REL // apps:$APPS">&2

IMG_EXT4_NO=1

IMG_EXT4=/tmp/${BOARD}.$LABEL.$REL.$VER.ext4.sd.img
IMG_VFAT=/tmp/${BOARD}.$LABEL.$REL.$VER.sd.img

## check
REQUIRED="rsync sync sfdisk gzip mkimage mksquashfs mkfs.ext4 mkfs.vfat mdir mcopy"

echo "[i] check required: $REQUIRED">&2

for t in $REQUIRED ; do
    c=$(which $t) || {
	echo "[e] $t not installed">&2
	exit 1
    }
done

echo "[i] check sfdisk">&2
sfdisk -v

. $0.lib

BIN="$PR/../bin"

[ -d $BIN ] || \
CMD mkdir -p $BIN

echo "[i] build $REL / $TARGET ">&2

R=
DL() {

    echo "[i] DL $@">&2

    F=$(basename $1)
    T=$2
    [ "$T" ] || T=$BIN
    S="$T/$F"
    R=
    [ -f "$S" ] && {

    [ -s "$S.md5sum" ] && {

	echo "[i] $F already downloaded">&2
	R=$S
	return

    }

	CMD rm $S
	
    }

    [ -f "$S" ] || {
	CMD wget $1 -O"$S" || return 1
	R=$S
    }

    [ -s "$S.md5sum" ] || {
	CMD md5sum $S | tee $S.md5sum
    }

}

T=
UNPACK(){
    T=
    case $1 in
	*.tar.*)
	T=${1%.tar.*}

	[ -d "$T" ] || return 0

	mkdir "$T"

	CMD tar -C "$T" -xf  "$1"
	;;
	*)
	echo "[i] undef format $1">&2
	return 1
    esac
}

## PREPRARE HOST OPKG

DL https://downloads.openwrt.org/releases/$REL/targets/x86/64/openwrt-$REL-x86-64-generic-rootfs.tar.gz || FAIL

#HOST_ARCH="$(uname -m)"

TO="$PR/../bin/$HOST_ARCH"
[ -d "$TO" ] || \
CMD mkdir -p $TO
CMD tar -xf $R -C "$TO" ./bin/opkg  ./lib/libc.so  ./lib/libgcc_s.so.1  ./lib/libubox.so

###

# cd ../bin
# DL http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/base/opkg_2019-06-14-dcbc142e-1_x86_64.ipk || FAIL

DL https://downloads.openwrt.org/releases/$REL/targets/$TARGET/64/openwrt-$REL-$TARGET-64-default-rootfs.tar.gz || FAIL

#UNPACK $R
#OWBASE=$T
OWBASE_TAR=$R

#exit 0


echo "$OWBASE_TAR"

#exit 

#OWTMP=/tmp/openwrt_khadas

[ "$OWTMP" ] || FAIL OWTMP undefined

rm -rf $OWTMP

[ -d "$OWTMP" ] || mkdir -p $OWTMP

#https://github.com/hyphop/khadas-linux-kernel/releases/download/openwrt/vims.dtb.tar.gz

for k in Image.gz krescue-vim1.dtb krescue-vim2.dtb krescue-vim3-a311d.dtb krescue-vim3-s922x.dtb modules.openwrt.tar.gz; do
    DL https://github.com/hyphop/khadas-linux-kernel/releases/download/openwrt/$k || FAIL
done

#UNPACK $R 
MODULES_TAR=$R

DL https://github.com/hyphop/khadas-uboot-spi/releases/download/openwrt/u-boot.$BOARD.sd.bin || FAIL
UBOOT_BIN=$R

#DL https://github.com/hyphop/pkg/releases/download/openwrt_khadas_fw/openwrt_khadas_fw.tar.gz || FAIL
DL https://github.com/hyphop/pkg/releases/download/openwrt_khadas_fw_vims/openwrt_khadas_fw_vims.tar.gz || FAIL


FW_BIN=$R

#CMD cp -a $OWBASE/* $OWTMP
CMD tar -xf $OWBASE_TAR -C $OWTMP

CMD rm -rf $OWTMP/lib/modules/*
CMD tar -xf $MODULES_TAR -C $OWTMP
CMD tar -xf $FW_BIN -C $OWTMP

TMPMOD=/tmp/

CMD ln -s $TMPMOD $OWTMP/lib/modules/$REP_MOD

[ -d $TMPMOD ] || mkdir $TMPMOD

#exit 0

CMD mkdir $OWTMP/boot

CMD mkimage -A $TARGET_KERNEL_ARCH \
    -O linux -C gzip -T kernel -a 0x01080000 -e 0x01080000 \
    -n kernel -d $PR/../bin/Image.gz $OWTMP/boot/uImage.gzip

CMD cp $PR/../bin/*.dtb $OWTMP/boot
CMD cp $UBOOT_BIN $OWTMP/boot
CMD cp $PR/../files/splash/splash.bmp.gz $OWTMP/boot

echo $LABEL > $OWTMP/$LABEL.label
echo $LABEL > $OWTMP/LABEL

CMD cp $PR/../files/user.env $OWTMP/boot/user.env

#echo cmdline= > $OWTMP/boot/user.env

$PR/post_install || FAIL

CMD rsync -a --inplace $PR/../files/root/* $OWTMP

for a in $APPS; do
    [ -f $PR/post_install_$a ] && {
    echo "[i] add apps $a">&2
    $PR/post_install_$a || FAIL
    }
done

## INSTALL EXTRA openwrt packages

DL https://github.com/hyphop/pkg/releases/download/bins/openwrt_extra_bins.tar.gz || FAIL

CMD tar -xf $R -C $OWTMP || FAIL

$PR/post_install.services || FAIL


for a in $APPS; do
    [ -f $PR/post_install_$a.services ] && {
    echo "[i] add apps $a">&2
    $PR/post_install_$a.services || FAIL
    }
done


## FAILSAFE
[ "$NO_FAILSAFE" ] && {
    echo "[i] disable failsafe | preinit ">&2
#    sed -i s/pi_preinit_no_failsafe=\"\"/pi_preinit_no_failsafe=\"1\"/ $OWTMP/lib/preinit/00_preinit.conf
#    chmod 0644 $OWTMP/etc/preinit

[ "" ] && {
    mv $OWTMP/etc/preinit $OWTMP/etc/preinit.disabled

echo "#!/bin/sh
## hyphop ##
#= preinit disabled
" > $OWTMP/etc/preinit

    mv $OWTMP/lib/preinit $OWTMP/lib/preinit.disabled
}

    CMD cp -a $PR/../files/preinit/* $OWTMP

}

# clean wrong kernel modules

#CMD rm -rf $OWTMP/lib/modules/4*

echo "[i] BUILD: $LABEL $REL $VER $BOARD $(TZ= date)" | tee $OWTMP/etc/banner.mod

CMD mkimage -C none -A arm -T script -d $PR/../files/openwrt_ext4.cmd $OWTMP/s905_autoscript
CMD cp $OWTMP/s905_autoscript  $OWTMP/aml_autoscript
cat $PR/../files/openwrt_ext4.cmd > $OWTMP/boot.ini

[ "$IMG_EXT4_NO" ] || {

CMD dd if=/dev/zero bs=1M count=$PART1SIZE of=$IMG_EXT4

CMD dd if=$UBOOT_BIN of=$IMG_EXT4 conv=fsync,notrunc bs=444 count=1
CMD dd if=$UBOOT_BIN of=$IMG_EXT4 conv=fsync,notrunc bs=512 skip=1 seek=1

echo "label:dos" | sfdisk -q $IMG_EXT4 || FAIL
echo "$P1OFFSET, " | sfdisk -q $IMG_EXT4 -a || FAIL

CMD mkfs.ext4 -F -L ${LABEL} -d $OWTMP -E offset=$((P1OFFSET*512)) $IMG_EXT4 || FAIL
CMD sync

}

## some triks for size

CMD cp $PR/../files/user_squash.env $OWTMP/boot/user.env
CMD cp $PR/../files/.auto* $OWTMP

case $BOARD in
    VIM3*)
    CMD sed -i s/mmcblk0/mmcblk1/ $OWTMP/boot/user.env
    ;;
esac

CMD cp $PR/../files/docs/* $OWTMP
CMD cp -a $PR/../files/scripts $OWTMP
#CMD cp $PR/../files/docs/* $OWTMP
CMD cp $PR/../README.changes.md $OWTMP

echo "[i] UBOOT WRITE $UBOOT_BIN">&2

CMD dd if=/dev/zero bs=512 count=$P1OFFSET of=$IMG_VFAT
CMD dd if=$UBOOT_BIN of=$IMG_VFAT conv=fsync,notrunc bs=444 count=1
CMD dd if=$UBOOT_BIN of=$IMG_VFAT conv=fsync,notrunc bs=512 skip=1 seek=1

CMD dd if=/dev/zero bs=1M count=$PART0SIZE of=$IMG_VFAT.vfat
CMD mkfs.vfat -n OW_BOOT -i DEADBEEF ${IMG_VFAT}.vfat


P=$(realpath $PWD)
#F="${IMG_VFAT}@@$((1+$PART0SIZE))M"
F="${IMG_VFAT}.vfat"

CMD mdir -i $F ::
#CMD mdir -i $F ::boot
cd $OWTMP
for f in boot LABEL OPENWRT.label s9* aml* boot.ini scripts README* .automount.no ; do
ls -l1 $f
CMD mcopy -i $F $f ::$f
done
cd $P

#echo no | mcat -i $F ::.automount.no


cat ${IMG_VFAT}.vfat >> $IMG_VFAT
CMD rm ${IMG_VFAT}.vfat

CMD sync

SFDISK_ARGS=-q
SFDISK_ARGS=

echo "[i] pake parts">&2
echo "label:dos | sfdisk $SFDISK_ARGS $IMG_VFAT ">&2
echo "label:dos" | sfdisk $SFDISK_ARGS $IMG_VFAT #|| FAIL

echo "[i] pake part 1">&2
echo "$P1OFFSET,  | sfdisk $SFDISK_ARGS $IMG_VFAT -a">&2
echo "$P1OFFSET, " | sfdisk $SFDISK_ARGS $IMG_VFAT -a #|| FAIL

echo "sfdisk $SFDISK_ARGS --part-type $IMG_VFAT 1 e">&2
sfdisk $SFDISK_ARGS --part-type $IMG_VFAT 1 e #|| FAIL

[ "$COMP" = "" ] && COMP=gzip
#[ "$CMP_BLOCK_SIZE" ] || CMP_BLOCK_SIZE=1024k
[ "$CMP_BLOCK_SIZE" ] || CMP_BLOCK_SIZE=128k
[ "$COMP" = "xz" ] && CMP_OPTS="-Xdict-size $CMP_BLOCK_SIZE -Xbcj arm"

[ -f $OWTMP.squashfs ] && rm $OWTMP.squashfs

CMD rm -rf $OWTMP/boot
CMD mkdir  $OWTMP/boot
CMD rm  $OWTMP/s9* 
[ -f $OWTMP/boot.ini ] && \
CMD rm  $OWTMP/boot.ini
CMD rm  $OWTMP/LABEL
CMD rm  $OWTMP/*.label
CMD rm -rf $OWTMP/scripts

[ $COMP = "zstd" ] && {
    mksquashfs 2>&1 | grep -q -m1 zstd || COMP=gzip
}

CMD mksquashfs \
    "$OWTMP" \
    $OWTMP.squashfs \
    -all-root \
    -b $CMP_BLOCK_SIZE \
    -comp $COMP $CMP_OPTS || FAIL

S=$(stat -c%s $IMG_VFAT)

cat $OWTMP.squashfs >> $IMG_VFAT
rm $OWTMP.squashfs

CMD dd if=/dev/zero bs=1M count=$PART2SIZE of=$IMG_VFAT.overlay

[ "$OVERLAY_INIT" ] && {
    echo "[i] INIT OVERLAY as ext4">&2
    CMD mkfs.ext4 -F -L rootfs_data $IMG_VFAT.overlay || FAIL
}

CMD sync

#BS=4096
#mkdir /tmp/_empty
#echo "OPENWRT_USER_JFFS2" > /tmp/_empty/LABEL
#CMD mkfs.jffs2 -r /tmp/_empty -s $BS -X lzo -q -p $((1000*$BS)) -o $IMG_VFAT.overlay
#rm -rf /tmp/_empty

CMD ls -l1 $IMG_VFAT.overlay

#CMD dd if=/tmp/image.jffs2 of=$IMG_VFAT.overlay conv=fsync,notrunc


cat $IMG_VFAT.overlay >> $IMG_VFAT
rm $IMG_VFAT.overlay

#dd if=/dev/zero bs=1M count=$PART2SIZE >> $IMG_VFAT

CMD sync

echo "[i] echo $P1OFFSET,  | sfdisk -q $IMG_VFAT -a || FAIL">&2
echo "$P1OFFSET, " | sfdisk -q $IMG_VFAT -a || FAIL

md5sum $IMG_VFAT > $IMG_VFAT.md5sum

gzip -1 -c $IMG_VFAT > $IMG_VFAT.gz

IMG=${IMG_VFAT%.img}
IMGZ=$IMG.zip

$PR/opkg list-installed | grep -v kmod- > /tmp/openwrt-pre-installed-packages.txt

[ -f $IMG ] || rm $IMGZ

CMD zip -1 -j $IMGZ \
    $IMG_VFAT \
    $IMG_VFAT.md5sum \
    $PR/../README*txt \
    /tmp/openwrt-pre-installed-packages.txt

cat $PR/../README.openwrt.vims.txt \
    $PR/../README.changes.txt \
    > $IMG.readme.txt

ls -l1 $IMG*


echo "[i] DONE">&2

